(function (window, undefined) {
    if (!window.jQuery) {
        throw new Error('wangEditor: 找不到window.jQuery，请检查是否引用了jQuery！')
        return;
    }
    if (navigator.appName === 'Microsoft Internet Explorer' && (/MSIE\s*(?=5.0|6.0|7.0|8.0)/i).test(navigator.appVersion)) {
        jQuery.fn.extend({
            wangEditor: function (options) {
                var
                height = options.frameHeight || '300px', initWords = options.initWords || '请输入...', $txt = $('<textarea style="width:100%; height:' + height + '">' + initWords + '</textarea>'), $lowBrowserInfo = $('<p style="color:#666666;background-color:#f1f1f1;">（抱歉，暂不支持IE8及以下浏览器，现在只能输入纯文本...）</p>'), $target = (options.codeTargetId && typeof options.codeTargetId === 'string') ? $('#' + options.codeTargetId) : false, saveTxt = function () { if ($target[0].nodeName.toLowerCase() === 'input') { $target.val($txt.text()); } else { $target.text($txt.text()); } }; if ($target) { $txt.click(saveTxt); $txt.keyup(saveTxt); }
                this.append($lowBrowserInfo).append($txt);
            }
        }); return;
    }
    var
    pluginName = 'wangEditor', version = 'v1.0.0', updateTime = '2014/11/06', email = 'wangfupeng1988#163.com', githubUrl = 'https://github.com/wangfupeng1988/wangEditor/', i, item, idPrefix = 'wangeditor_' + Math.random().toString().replace('.', '') + '_', fontFamilyOptionsStr = '', fontFamilyOptions = ['宋体', '黑体', '楷体', '隶书', '幼圆', '微软雅黑', 'Arial', 'Verdana', 'Georgia', 'Times New Roman', 'Trebuchet MS', 'Courier New', 'Impact', 'Comic Sans MS'], colorOptionsStr = '', bgColorOptionsStr = '', colorOptions = { red: '红色', blue: '蓝色', green: '绿色', yellow: '黄色', black: '黑色', gray: '灰色', silver: '银色' }, fontsizeOptionsStr = '', fontsizeOptions = { 1: '10px', 2: '13px', 3: '16px', 4: '19px', 5: '22px', 6: '25px', 7: '28px' }, valueForLoop; for (item in fontsizeOptions) { if (Object.prototype.hasOwnProperty.call(fontsizeOptions, item)) { valueForLoop = fontsizeOptions[item]; fontsizeOptionsStr += '<li><a href="#" fontSize="' + item + '" style="font-size:' + valueForLoop + ';">' + valueForLoop + '</a></li>'; } }
    for (item in colorOptions) { if (Object.prototype.hasOwnProperty.call(colorOptions, item)) { valueForLoop = colorOptions[item]; colorOptionsStr += '<li><a href="#" style="color:' + item + ';">' + valueForLoop + '</a></li>'; } }
    for (item in colorOptions) { if (Object.prototype.hasOwnProperty.call(colorOptions, item)) { valueForLoop = colorOptions[item]; bgColorOptionsStr += '<li><a href="#" style="background-color:' + item + '; color:white;">' + valueForLoop + '</a></li>'; } }
    for (i = 0; i < fontFamilyOptions.length; i++) { valueForLoop = fontFamilyOptions[i]; fontFamilyOptionsStr += '<li><a href="#" style="font-family:' + valueForLoop + '">' + valueForLoop + '</a></li>'; }
    jQuery.fn.extend({
        wangEditor: function (options) {
            var
            $menuContainer = $('<div></div>'), $menuToolbar = $('<div class="btn-toolbar"></div>'), $btnGroup = $('<div class="btn-group"></div>'), btnTemp = function (title, iconClass, isDropdown, modalTarget, btnContent) {
                var temp = '', btnClass = 'btn'; if (!title || typeof title !== 'string') { throw new Error('wangEditor_btnTemp：必须传入title参数，而且title必须是字符串类型！'); return; }
                if ((!iconClass || typeof iconClass !== 'string') && !btnContent) { throw new Error('wangEditor_btnTemp：必须传入iconClass参数，而且iconClass必须是字符串类型！'); return; }
                isDropdown = !!isDropdown; if (isDropdown) { btnClass = 'btn dropdown-toggle'; }
                if (modalTarget && typeof modalTarget !== 'string') { throw new Error('wangEditor_btnTemp：传入的modalTarget参数必须是字符串类型！'); return; }
                temp += '<button title="' + title + '" class="' + btnClass + '" '; if (isDropdown) { temp += ' data-toggle="dropdown" '; }
                if (modalTarget) { temp += ' data-target="' + modalTarget + '" data-backdrop="false"  data-toggle="modal" '; }
                temp += '>'; if (btnContent && typeof btnContent === 'string') { temp += btnContent; } else { temp += '<i class="' + iconClass + '">'; }
                if (isDropdown) { temp += '<span class="caret"></span>'; }
                temp += '</button>'; return temp;
            }, dropdownMenuTemp = function (headerText, content) {
                if (!content || typeof content !== 'string') { throw new Error('wangEditor_dropdownMenuTemp：content参数不能为空，且必须为字符串类型！'); return; }
                var temp = ''; temp += '<ul class="dropdown-menu">'; if (headerText && typeof headerText === 'string') { temp += '<li class="nav-header">' + headerText + '</li>'; }
                temp += content; temp += '</ul>'; return temp;
            }, $btnGroup_bold = $btnGroup.clone(), $menuBold = $(btnTemp('加粗', 'icon-bold')), $menuItalic = $(btnTemp('斜体', 'icon-italic')), $menuUnderline = $(btnTemp('下划线', 'icon-underline')), _nodata = $btnGroup_bold.append($menuBold).append($menuItalic).append($menuUnderline), $btnGroup_fontsize = $btnGroup.clone(), $menuFontsize = $(btnTemp('字号', 'icon-text-height', true)), $dropdownMenuFontsize = $(dropdownMenuTemp('字号：', fontsizeOptionsStr)), _nodata = $btnGroup_fontsize.append($menuFontsize).append($dropdownMenuFontsize), $btnGroup_fontfamily = $btnGroup.clone(), $menuFontFamily = $(btnTemp('字体', 'icon-font', true)), $dropdownMenuFontFamily = $(dropdownMenuTemp('字体：', fontFamilyOptionsStr)), _nodata = $btnGroup_fontfamily.append($menuFontFamily).append($dropdownMenuFontFamily), $btnGroup_fontColor = $btnGroup.clone(), $menuFontColor = $(btnTemp('前景色', null, true, null, '<b style="color:red;">A</b>')), $dropdownMenuFontColor = $(dropdownMenuTemp('前景色：', colorOptionsStr)), _nodata = $btnGroup_fontColor.append($menuFontColor).append($dropdownMenuFontColor), $btnGroup_bgColor = $btnGroup.clone(), $menubgColor = $(btnTemp('背景色', null, true, null, '<b style="background-color:blue;color:white;">&nbsp;A&nbsp;</b>')), $dropdownMenuBgColor = $(dropdownMenuTemp('背景色：', bgColorOptionsStr)), _nodata = $btnGroup_bgColor.append($menubgColor).append($dropdownMenuBgColor), $btnGroup_list = $btnGroup.clone(), $menuOrderedList = $(btnTemp('有序列表', 'icon-list-ol')), $menuUnorderedList = $(btnTemp('无序列表', 'icon-list-ul')), _nodata = $btnGroup_list.append($menuUnorderedList).append($menuOrderedList), $btnGroup_align = $btnGroup.clone(), $menuAlignLeft = $(btnTemp('左对齐', 'icon-align-left')), $menuAlignCenter = $(btnTemp('居中', 'icon-align-center')), $menuAlignRight = $(btnTemp('右对齐', 'icon-align-right')), _nodata = $btnGroup_align.append($menuAlignLeft).append($menuAlignCenter).append($menuAlignRight), $btnGroup_link = $btnGroup.clone(), linkModalId = idPrefix + 'LinkModal', $menuLink = $(btnTemp('链接', 'icon-link', false, '#' + linkModalId)), $menuRemoveLink = $(btnTemp('删除链接', 'icon-remove')), _nodata = $btnGroup_link.append($menuLink).append($menuRemoveLink), $btnGroup_img = $btnGroup.clone(), imgModalId = idPrefix + 'imgModal', $menuImg = $(btnTemp('插入图片', 'icon-picture', false, '#' + imgModalId)), _nodata = $btnGroup_img.append($menuImg), $btnGroup_undo = $btnGroup.clone(), $menuUndo = $(btnTemp('撤销', 'icon-undo')), $menuRedo = $(btnTemp('恢复', 'icon-repeat')), _nodata = $btnGroup_undo.append($menuUndo).append($menuRedo), $btnGroup_info = $btnGroup.clone(), infoModalId = idPrefix + 'infoModal', $menuInfo = $(btnTemp('关于', 'icon-info-sign', false, '#' + infoModalId)), _nodata = $btnGroup_info.append($menuInfo), $menuModal = $('<div></div>'), modalTemp = function (id, title, bodyContents, footerContents) {
                if (!id || typeof id !== 'string') { throw new Error('wangEditor_modalTemp: id参数不能为空，且必须为字符串类型'); return; }
                if (!title || typeof title !== 'string') { throw new Error('wangEditor_modalTemp: title参数不能为空，且必须为字符串类型'); return; }
                var i, modal = $('<div id="' + id + '" class="modal hide fade">'), modalTitle = $('<div class="modal-header">' + '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>' + '<h4>' + title + '</h4>' + '</div>'), modalBody = $('<div class="modal-body">'), modalFooter = $('<div class="modal-footer">'); modal.append(modalTitle); if (bodyContents && typeof bodyContents.length === 'number' && bodyContents.length > 0) {
                    for (i = 0; i < bodyContents.length; i++) { modalBody.append(bodyContents[i]); }
                    modal.append(modalBody);
                }
                if (footerContents && typeof footerContents.length === 'number' && footerContents.length > 0) {
                    for (i = 0; i < footerContents.length; i++) { modalFooter.append(footerContents[i]); }
                    modal.append(modalFooter);
                }
                return modal;
            }, $linkModal, $imgModal, $infoModal, iframeHeight = options.frameHeight || '300px', $iframeContainer = $('<div style="width: 100%; height: ' + iframeHeight + '; border: 1px solid #cccccc;"></div>'), $iframe = $('<iframe frameborder="0" width="100%" height="100%"></iframe>'), initWords = options.initWords || '请输入...', _nodata = $iframeContainer.append($iframe), iframeWindow, $iframeWindow, iframeDocument, $iframeDocument, $codeTarget, currentSelectionData; $menuToolbar.append($btnGroup_fontfamily); $menuToolbar.append($btnGroup_fontsize); $menuToolbar.append($btnGroup_bold); $menuToolbar.append($btnGroup_fontColor); $menuToolbar.append($btnGroup_bgColor); $menuToolbar.append($btnGroup_list); $menuToolbar.append($btnGroup_align); $menuToolbar.append($btnGroup_link); $menuToolbar.append($btnGroup_img); $menuToolbar.append($btnGroup_undo); if (options.showInfo) { $menuToolbar.append($btnGroup_info); }
            $menuContainer.append($menuToolbar); $menuContainer.find('button').tooltip(); var $linkModalBody_desc = $('<p>链接地址：</p>'), $linkModalBody_txtUrl = $('<input type="text" placeholder="http(s)://" class="input-block-level"/>'), $linkModalBody_target = $('<p>链接目标：</p>'), $linkModalBody_sltTarget = $('<select><option>_blank</option><option>_self</option></select>'), linkModalBodyContents = [$linkModalBody_desc, $linkModalBody_txtUrl, $linkModalBody_target, $linkModalBody_sltTarget], $linkModalFooter_save = $('<a href="#" class="btn btn-primary">插入链接</a>'), linkModalFooterContents = [$linkModalFooter_save]; $linkModal = modalTemp(linkModalId, '插入链接', linkModalBodyContents, linkModalFooterContents); var $imgModalBody_desc = $('<p>输入图片URL地址：</p>'), $imgModalBody_txtUrl = $('<input type="text" placeholder="http(s)://" class="input-block-level"/>'), imgModalBodyContents = [$imgModalBody_desc, $imgModalBody_txtUrl], $imgModalFooter_save = $('<a href="#" class="btn btn-primary">插入</a>'), imgModalFooterContents = [$imgModalFooter_save]; $imgModal = modalTemp(imgModalId, '插入图片', imgModalBodyContents, imgModalFooterContents); var $infoModalBody_info = $('<p>当前版本：' + version + '</p>' + '<p>更新日期：' + updateTime + '</p>' + '<p>联系我们：' + email + '（#换成@）</p>' + '<p>获取代码：<a href="' + githubUrl + '" target="_blank">' + githubUrl + '</a></p>'), infoModalBodyContents = [$infoModalBody_info]; $infoModal = modalTemp(infoModalId, pluginName, infoModalBodyContents); $menuModal.append($linkModal).append($imgModal).append($infoModal); $menuContainer.append($menuModal); this.append($menuContainer); this.append($iframeContainer); iframeWindow = $iframe[0].contentWindow; $iframeWindow = $(iframeWindow); iframeDocument = iframeWindow.document; $iframeDocument = $(iframeDocument); iframeDocument.open(); iframeDocument.write('<!DOCTYPE html>' + '<html xmlns="http://www.w3.org/1999/xhtml">' + '<head><title></title></head>' + '<body><p>' + initWords + '</p></body>' + '</html>'); iframeDocument.close(); iframeDocument.designMode = 'on'; $(window).load(function () { if (iframeDocument.designMode.toLowerCase() === 'off') { iframeDocument.designMode = 'on'; } }); function saveIframeCode() {
                if (!$codeTarget) {
                    if (!options || !options.codeTargetId || typeof options.codeTargetId !== 'string') { return; }
                    var $target = $('#' + options.codeTargetId); if ($target.length === 0) { return; }
                }
                if ($target[0].nodeName.toLowerCase() === 'input') { $target.val(iframeDocument.body.innerHTML); } else { $target.text(iframeDocument.body.innerHTML); }
            }
            $iframeWindow.blur(saveIframeCode); function iframeListener(e) {
                var eType = e.type, kCode = e.keyCode, keyForMoveCursor = false, kCodes = [33, 34, 35, 36, 37, 38, 39, 40]; keyForMoveCursor = (eType === 'keyup') && (kCodes.indexOf(kCode) !== -1); if (eType !== 'click' && !keyForMoveCursor) { return; }
                if (iframeDocument.queryCommandState('bold')) { $menuBold.addClass('btn-primary'); } else { $menuBold.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('italic')) { $menuItalic.addClass('btn-primary'); } else { $menuItalic.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('underline')) { $menuUnderline.addClass('btn-primary'); } else { $menuUnderline.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('JustifyLeft')) { $menuAlignLeft.addClass('btn-primary'); } else { $menuAlignLeft.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('JustifyCenter')) { $menuAlignCenter.addClass('btn-primary'); } else { $menuAlignCenter.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('JustifyRight')) { $menuAlignRight.addClass('btn-primary'); } else { $menuAlignRight.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('InsertOrderedList')) { $menuOrderedList.addClass('btn-primary'); } else { $menuOrderedList.removeClass('btn-primary'); }
                if (iframeDocument.queryCommandState('InsertUnorderedList')) { $menuUnorderedList.addClass('btn-primary'); } else { $menuUnorderedList.removeClass('btn-primary'); }
                currentSelectionData = iframeDocument.getSelection().getRangeAt(0);
            }
            $iframeDocument.click(iframeListener); $iframeDocument.keyup(iframeListener); $menuBold.click(function () { iframeDocument.execCommand('bold'); if (iframeDocument.queryCommandState('bold')) { $menuBold.addClass('btn-primary'); } else { $menuBold.removeClass('btn-primary'); } }); $menuItalic.click(function () { iframeDocument.execCommand('italic'); if (iframeDocument.queryCommandState('italic')) { $menuItalic.addClass('btn-primary'); } else { $menuItalic.removeClass('btn-primary'); } }); $menuUnderline.click(function () { iframeDocument.execCommand('Underline'); if (iframeDocument.queryCommandState('Underline')) { $menuUnderline.addClass('btn-primary'); } else { $menuUnderline.removeClass('btn-primary'); } }); $dropdownMenuFontColor.find('a').each(function () { var menuColor = $(this), value = this.style.color; menuColor.click(function (e) { iframeDocument.execCommand('ForeColor', false, value); e.preventDefault(); }); }); $dropdownMenuBgColor.find('a').each(function () { var menuBgColor = $(this), value = this.style.backgroundColor; menuBgColor.click(function (e) { iframeDocument.execCommand('backColor', false, value); e.preventDefault(); }); }); $dropdownMenuFontFamily.find('a').each(function () { var menuFamily = $(this), value = menuFamily.css('font-family'); menuFamily.click(function (e) { iframeDocument.execCommand('FontName', false, value); e.preventDefault(); }); }); $dropdownMenuFontsize.find('a').each(function () { var menuFontSize = $(this), value = menuFontSize.attr('fontSize'); menuFontSize.click(function (e) { iframeDocument.execCommand('FontSize', false, value); e.preventDefault(); }); }); $linkModalFooter_save.click(function (e) {
                var selection = iframeDocument.getSelection(), url = $linkModalBody_txtUrl.val(), target = $linkModalBody_sltTarget.val(); if (!selection || selection.anchorOffset === 0) { selection.removeAllRanges(); selection.addRange(currentSelectionData); }
                iframeDocument.execCommand('createLink', false, url); e.preventDefault(); $linkModal.modal('hide');
            }); $menuRemoveLink.click(function () { iframeDocument.execCommand('unlink'); }); $imgModalFooter_save.click(function (e) {
                var selection = iframeDocument.getSelection(), url = $imgModalBody_txtUrl.val(); if (selection) { selection.removeAllRanges(); selection.addRange(currentSelectionData); }
                iframeDocument.execCommand('insertImage', false, url)
                e.preventDefault(); $imgModal.modal('hide');
            }); $menuAlignLeft.click(function () { iframeDocument.execCommand('JustifyLeft'); if (iframeDocument.queryCommandState('JustifyLeft')) { $menuAlignLeft.addClass('btn-primary'); } else { $menuAlignLeft.removeClass('btn-primary'); } }); $menuAlignCenter.click(function () { iframeDocument.execCommand('JustifyCenter'); if (iframeDocument.queryCommandState('JustifyCenter')) { $menuAlignCenter.addClass('btn-primary'); } else { $menuAlignCenter.removeClass('btn-primary'); } }); $menuAlignRight.click(function () { iframeDocument.execCommand('JustifyRight'); if (iframeDocument.queryCommandState('JustifyRight')) { $menuAlignRight.addClass('btn-primary'); } else { $menuAlignRight.removeClass('btn-primary'); } }); $menuOrderedList.click(function () { iframeDocument.execCommand('InsertOrderedList'); }); $menuUnorderedList.click(function () { iframeDocument.execCommand('InsertUnorderedList'); }); $menuUndo.click(function () { iframeDocument.execCommand('Undo'); }); $menuRedo.click(function () { iframeDocument.execCommand('Redo'); }); $menuContainer.click(function () { saveIframeCode(); });
        }
    });
})(window);